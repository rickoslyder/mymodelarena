// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // Make sure this matches your .env file
}

model Model {
  id              String   @id @default(cuid())
  name            String   @unique // User-defined display name
  baseUrl         String   // Base URL (especially for custom, or standard URL for known providers)
  apiKeyEnvVar    String   // Name of the env var holding the key
  
  provider        String?  // e.g., 'openai', 'anthropic', 'google', 'mistral', 'openrouter', 'custom'
  modelIdentifier String?  // Actual model ID from the provider (e.g., 'gpt-4o')
  
  inputTokenCost  Float    
  outputTokenCost Float    
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  generatedEvals Eval[]      @relation("GeneratedBy")
  evalResponses  Response[]
  scoresGiven    Score[]     @relation("ScoredByLlm") // Scores given BY this model when acting as scorer
  judgmentsGiven Judgment[]  @relation("JudgedBy") // Judgments given BY this model when acting as judge
}

model Eval {
  id               String    @id @default(cuid())
  name             String?
  description      String?
  generationPrompt String?   // The prompt used to generate this eval
  difficulty       String?   // e.g., "easy", "medium", "hard"
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  generatorModelId String?   // Which model generated this (if any)
  generatorModel   Model?    @relation("GeneratedBy", fields: [generatorModelId], references: [id], onDelete: SetNull) // Keep Eval if model is deleted

  // Template relation
  templateId       String?   // Which template was used to generate this eval
  templateUsed     EvalTemplate? @relation("GeneratedFromTemplate", fields: [templateId], references: [id], onDelete: SetNull)

  // Generation options used
  questionTypes    String?   // JSON string of question types used
  generationFormat String?   // Format used during generation

  questions Question[]
  tags      EvalTag[]
  evalRuns  EvalRun[]

  @@index([generatorModelId])
  @@index([templateId])
}

model Question {
  id          String   @id @default(cuid())
  evalId      String
  text        String
  version     Int      @default(1) // Simple version counter
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  eval       Eval        @relation(fields: [evalId], references: [id], onDelete: Cascade) // If Eval deleted, delete Questions
  responses  Response[]
  judgments  Judgment[]

  @@index([evalId])
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  evals EvalTag[]
}

// Explicit many-to-many join table for Evals and Tags
model EvalTag {
  evalId String
  tagId  String
  eval   Eval   @relation(fields: [evalId], references: [id], onDelete: Cascade) // If Eval deleted, remove tag associations
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade) // If Tag deleted, remove tag associations

  @@id([evalId, tagId])
  @@index([tagId])
}

model EvalRun {
  id        String   @id @default(cuid())
  evalId    String
  status    String   // e.g., PENDING, RUNNING, COMPLETED, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eval      Eval       @relation(fields: [evalId], references: [id], onDelete: Cascade) // If Eval deleted, delete Runs
  responses Response[]

  @@index([evalId])
  @@index([status])
}

model Response {
  id              String    @id @default(cuid())
  evalRunId       String
  questionId      String
  modelId         String    // The model that generated this response
  responseText    String?
  error           String?   // Store error message if call failed
  inputTokens     Int?
  outputTokens    Int?
  cost            Float?
  executionTimeMs Int?
  createdAt       DateTime  @default(now())

  evalRun    EvalRun  @relation(fields: [evalRunId], references: [id], onDelete: Cascade) // If Run deleted, delete Responses
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade) // If Question deleted, delete Responses
  model      Model    @relation(fields: [modelId], references: [id], onDelete: Restrict) // Prevent model deletion if responses exist
  scores     Score[]

  @@index([evalRunId])
  @@index([questionId])
  @@index([modelId])
}

model Score {
  id            String   @id @default(cuid())
  responseId    String   @unique // Each response gets max one score record
  scoreValue    Float?   // Could be rating (1-5) or binary (0/1) etc.
  justification String?  // Primarily for LLM scoring
  scorerType    String   // 'manual' or 'llm'
  scorerLlmId   String?  // Which model did the scoring (if scorerType='llm')
  createdAt     DateTime @default(now())

  response  Response @relation(fields: [responseId], references: [id], onDelete: Cascade) // If Response deleted, delete Score
  scorerLlm Model?   @relation("ScoredByLlm", fields: [scorerLlmId], references: [id], onDelete: SetNull) // If scorer model deleted, keep score but nullify link

  @@index([scorerLlmId])
}

model Judgment {
  id               String   @id @default(cuid())
  questionId       String
  judgeModelId     String   // Which model gave this judgment
  overallScore     Float?   // e.g., 1-10
  // Optional: Store scores per predefined criteria if used
  clarityScore     Float?
  difficultyScore  Float?
  relevanceScore   Float?
  originalityScore Float?
  justification    String?
  createdAt        DateTime @default(now())

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade) // If Question deleted, delete Judgment
  judgeModel Model    @relation("JudgedBy", fields: [judgeModelId], references: [id], onDelete: Restrict) // Prevent judge model deletion if judgments exist

  @@index([questionId])
  @@index([judgeModelId])
}

model ModelPrice {
  id              String   @id @default(cuid())
  Provider        String
  ModelID         String   // Alias or snapshot ID
  CanonicalID     String   // The corresponding snapshot ID
  ContextWindow   Int
  InputUSDPer1M   Float
  OutputUSDPer1M  Float
  Notes           String?
  Date            DateTime // Capture date of the price record

  // Ensure we don't store the exact same price record twice for the same model on the same day
  @@unique([ModelID, Date])
  // Indexing for common lookups
  @@index([ModelID])
  @@index([CanonicalID])
  @@index([Date])
}

// Template system for eval generation
model EvalTemplate {
  id               String   @id @default(cuid())
  name             String
  description      String
  category         String
  icon             String?
  prompt           String   // The generation prompt for this template
  isPublic         Boolean  @default(false) // Public templates visible to all users
  isBuiltIn        Boolean  @default(false) // Built-in system templates
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Default generation options
  defaultQuestionTypes String   @default("[]") // JSON string of question types
  defaultDifficulty    String   @default("medium") // easy, medium, hard, expert
  defaultFormat        String   @default("open-ended") // open-ended, multiple-choice, etc.
  defaultCount         Int      @default(10)
  
  // Metadata
  tags             String   @default("[]") // JSON string of tags
  examples         String   @default("[]") // JSON string of example questions
  
  // Optional: User ownership (for user-created templates)
  createdByUserId  String?
  
  // Template usage tracking
  usageCount       Int      @default(0)
  
  // Relations
  templateTags     TemplateTag[]
  generatedEvals   Eval[]    @relation("GeneratedFromTemplate")
  
  @@index([category])
  @@index([isPublic])
  @@index([isBuiltIn])
  @@index([createdByUserId])
}

// Tag system for templates
model TemplateTagDefinition {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  color       String?       // Hex color for UI display
  createdAt   DateTime      @default(now())
  
  templateTags TemplateTag[]
}

// Many-to-many relationship between templates and tags
model TemplateTag {
  templateId String
  tagId      String
  
  template   EvalTemplate         @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tag        TemplateTagDefinition @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([templateId, tagId])
  @@index([tagId])
}

// Template collections for organizing templates
model TemplateCollection {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // User ownership
  createdByUserId String?
  
  items       TemplateCollectionItem[]
  
  @@index([createdByUserId])
  @@index([isPublic])
}

// Items within template collections
model TemplateCollectionItem {
  id           String   @id @default(cuid())
  collectionId String
  templateId   String
  order        Int      @default(0)
  addedAt      DateTime @default(now())
  
  collection   TemplateCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  
  @@unique([collectionId, templateId])
  @@index([templateId])
}
